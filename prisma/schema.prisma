// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(SUBSCRIBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  articles        Article[]
  metrics         Metric[]
  newsletterSents NewsletterSent[]

  @@map("users")
}

model Article {
  id            String    @id @default(cuid())
  title         String
  summary       String?
  content       String?
  sourceUrl     String?
  sourceName    String?
  author        String?
  publishedAt   DateTime?
  whyItMatters  String?
  talkTrack     String?
  category      String    @default("NEWS")
  vertical      String?
  priority      Priority  @default(MEDIUM)
  status        Status    @default(DRAFT)
  tags          String[]  @default([])
  
  // AI Evaluation fields
  importanceScore Int?     @default(0)
  reasoning       String?
  
  // Metrics
  views         Int       @default(0)
  clicks        Int       @default(0)
  shares        Int       @default(0)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  newsletterArticles NewsletterArticle[]
  tags              ArticleTag[]

  @@map("articles")
}

model Metric {
  id          String    @id @default(cuid())
  title       String
  value       String
  unit        String?
  context     String?
  source      String?
  sourceUrl   String?
  whyItMatters String?
  talkTrack   String?
  category    String    @default("METRICS")
  vertical    String?
  priority    Priority  @default(MEDIUM)
  status      Status    @default(DRAFT)
  tags        String[]  @default([])
  
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  newsletterMetrics NewsletterMetric[]
  tags             MetricTag[]

  @@map("metrics")
}

model Newsletter {
  id          String            @id @default(cuid())
  subject     String
  content     String
  status      NewsletterStatus  @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?
  
  // Metrics
  recipients  Int               @default(0)
  opens       Int               @default(0)
  clicks      Int               @default(0)
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  articles     NewsletterArticle[]
  metrics      NewsletterMetric[]
  sent         NewsletterSent[]

  @@map("newsletters")
}

model NewsletterArticle {
  id           String    @id @default(cuid())
  newsletterId String
  articleId    String
  order        Int       @default(0)
  
  newsletter   Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
  article      Article    @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([newsletterId, articleId])
  @@map("newsletter_articles")
}

model NewsletterMetric {
  id           String    @id @default(cuid())
  newsletterId String
  metricId     String
  order        Int       @default(0)
  
  newsletter   Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
  metric       Metric     @relation(fields: [metricId], references: [id], onDelete: Cascade)

  @@unique([newsletterId, metricId])
  @@map("newsletter_metrics")
}

model NewsletterSent {
  id           String    @id @default(cuid())
  newsletterId String
  userId       String
  sentAt       DateTime  @default(now())
  opened       Boolean   @default(false)
  openedAt     DateTime?
  
  newsletter   Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([newsletterId, userId])
  @@map("newsletter_sent")
}

model Tag {
  id    String @id
  name  String @unique
  color String @default("#6B7280")

  // Relations
  articles ArticleTag[]
  metrics  MetricTag[]

  @@map("tags")
}

model ArticleTag {
  articleId String
  tagId     String
  
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@map("article_tags")
}

model MetricTag {
  metricId String
  tagId    String
  
  metric   Metric @relation(fields: [metricId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([metricId, tagId])
  @@map("metric_tags")
}

model Source {
  id      String  @id
  name    String  @unique
  url     String?
  rssUrl  String?
  active  Boolean @default(true)

  @@map("sources")
}

model NewsletterSubscriber {
  id              String            @id @default(cuid())
  email           String            @unique
  name            String?
  isActive        Boolean           @default(true)
  subscribedAt    DateTime          @default(now())
  unsubscribedAt  DateTime?
  
  @@map("newsletter_subscribers")
}

// Enums
enum Role {
  ADMIN
  EDITOR
  SUBSCRIBER
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum NewsletterStatus {
  DRAFT
  SCHEDULED
  SENT
  CANCELLED
}

// Valid values:
// Role: "ADMIN", "EDITOR", "SUBSCRIBER"
// Category: "NEWS", "METRICS"
// Vertical: "Technology & Media", "Consumer & Retail", "Healthcare", "Financial Services", "Insurance", "Automotive", "Travel & Hospitality", "Education", "Telecom", "Services", "Political Candidate & Advocacy", "Other"
// Priority: "HIGH", "MEDIUM", "LOW"
// Status: "DRAFT", "PUBLISHED", "ARCHIVED"
// NewsletterStatus: "DRAFT", "SCHEDULED", "SENT", "CANCELLED" 