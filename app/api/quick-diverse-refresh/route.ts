import { NextResponse } from 'next/server'
import Parser from 'rss-parser'
import { prisma } from '@/lib/db'
import { duplicatePreventionService } from '@/lib/duplicate-prevention'

const parser = new Parser()

// Simplified, faster sources for quick diverse content
const FAST_DIVERSE_SOURCES = [
  // Technology & Media (High Priority)
  { name: 'AdExchanger', url: 'https://www.adexchanger.com/feed/', vertical: 'Technology & Media', limit: 4 },
  { name: 'MarTech Today', url: 'https://martech.org/feed/', vertical: 'Technology & Media', limit: 4 },
  { name: 'Digiday', url: 'https://digiday.com/feed/', vertical: 'Technology & Media', limit: 4 },
  
  // Consumer & Retail
  { name: 'Retail Dive', url: 'https://www.retaildive.com/feeds/news/', vertical: 'Consumer & Retail', limit: 3 },
  { name: 'Chain Store Age', url: 'https://chainstoreage.com/rss.xml', vertical: 'Consumer & Retail', limit: 3 },
  
  // Financial Services
  { name: 'American Banker', url: 'https://www.americanbanker.com/feed', vertical: 'Financial Services', limit: 3 },
  { name: 'Banking Dive', url: 'https://www.bankingdive.com/feeds/news/', vertical: 'Financial Services', limit: 3 },
  
  // Healthcare
  { name: 'Modern Healthcare', url: 'https://www.modernhealthcare.com/rss.xml', vertical: 'Healthcare', limit: 3 },
  { name: 'Healthcare Dive', url: 'https://www.healthcaredive.com/feeds/news/', vertical: 'Healthcare', limit: 3 },
  
  // Other Verticals
  { name: 'TechCrunch', url: 'https://techcrunch.com/feed/', vertical: 'Technology & Media', limit: 2 },
  { name: 'Forbes CMO Network', url: 'https://www.forbes.com/sites/cmo/feed/', vertical: 'Services', limit: 2 }
]

export async function POST() {
  try {
    console.log('üöÄ Starting quick diverse content refresh (optimized for speed)...')
    
    const startTime = Date.now()
    
    // Clear existing content
    await prisma.article.deleteMany({})
    console.log('üßπ Cleared existing content')
    
    let totalArticles = 0
    const verticalCounts: Record<string, number> = {}
    
    // Process each source sequentially to avoid overwhelming the system
    for (const source of FAST_DIVERSE_SOURCES) {
      try {
        console.log(`üì° Processing ${source.name} (${source.vertical})...`)
        
        const feed = await parser.parseURL(source.url)
        const items = feed.items?.slice(0, source.limit) || []
        
        for (const item of items) {
          if (!item.title || !item.link || item.title.length < 10) continue
          
          const title = item.title.trim()
          const summary = (item.contentSnippet || '').trim().slice(0, 300) || `Latest from ${source.name}`
          
          // Simple relevance scoring (no AI to avoid timeouts)
          const zetaKeywords = ['personalization', 'CDP', 'marketing automation', 'AI', 'data', 'retail media', 'advertising']
          const contentLower = `${title} ${summary}`.toLowerCase()
          const relevanceScore = zetaKeywords.reduce((score, keyword) => 
            contentLower.includes(keyword) ? score + 10 : score, 0
          )
          
          // Simple talk track generation
          const talkTrack = `Key insight: ${title.split(' ').slice(0, 8).join(' ')}... This ${source.vertical.toLowerCase()} development could impact client strategies.`
          const whyItMatters = `Important ${source.vertical.toLowerCase()} trend that sales teams should be aware of for client conversations.`
          
          try {
            const result = await duplicatePreventionService.createArticleSafely({
              title,
              summary,
              sourceUrl: item.link,
              sourceName: source.name,
              publishedAt: item.pubDate ? new Date(item.pubDate) : new Date(),
              vertical: source.vertical,
              priority: relevanceScore > 10 ? 'HIGH' : 'MEDIUM',
              whyItMatters,
              talkTrack,
              importanceScore: relevanceScore
            })
            
            if (result.success) {
              totalArticles++
              verticalCounts[source.vertical] = (verticalCounts[source.vertical] || 0) + 1
            }
          } catch (error) {
            console.error(`Error saving article from ${source.name}:`, error)
          }
        }
        
        console.log(`‚úÖ ${source.name}: Added articles`)
        
        // Add small delay to avoid overwhelming RSS servers
        await new Promise(resolve => setTimeout(resolve, 200))
        
      } catch (error) {
        console.error(`‚ùå Error processing ${source.name}:`, error)
      }
    }
    
    const duration = Math.round((Date.now() - startTime) / 1000)
    const processedVerticals = Object.keys(verticalCounts)
    
    console.log(`üéâ Quick diverse refresh complete: ${totalArticles} articles across ${processedVerticals.length} verticals in ${duration}s`)
    
    return NextResponse.json({
      success: true,
      message: `Quick diverse content refresh completed successfully`,
      results: {
        articlesIngested: totalArticles,
        verticalsProcessed: processedVerticals,
        verticalBreakdown: Object.entries(verticalCounts).map(([vertical, count]) => 
          `‚úÖ ${vertical}: ${count} articles`
        )
      },
      improvements: [
        "‚úÖ Content now spans multiple verticals (not just Technology & Media)",
        "‚úÖ Includes Consumer & Retail, Financial Services, Healthcare, and Services",
        "‚úÖ Articles have Zeta Global relevance scoring",
        "‚úÖ Each vertical represented in the content mix",
        "‚úÖ Talk tracks and insights for sales conversations",
        "‚úÖ Optimized for fast execution to avoid timeouts"
      ],
      howItWorks: {
        ingestion: `Processed ${FAST_DIVERSE_SOURCES.length} diverse sources across ${processedVerticals.length} verticals`,
        allPage: "Shows articles most relevant for Zeta Global business",
        verticalFiltering: "Each vertical will show its own articles when implemented",
        performance: "Optimized for Vercel's execution limits"
      },
      verticalDistribution: verticalCounts,
      duration: `${duration} seconds`,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('‚ùå Quick diverse content refresh failed:', error)
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
      details: 'Failed to refresh content with quick diverse sources'
    }, { status: 500 })
  }
}

export async function GET() {
  return POST()
} 